// This code was generated by KSP annotation processor Kobold
// https://github.com/bsautner/kobold       
package testClasses

import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.text.BasicText
import androidx.compose.foundation.text.BasicTextField
import androidx.compose.material.Button
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.unit.dp
import io.github.bsautner.kobold.client.ApiClient
import io.github.bsautner.kobold.introspectSerializableClass
import io.ktor.client.statement.bodyAsText
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import testClasses.Login

@Composable
public fun LoginComposable() {
  val defaults = remember { mutableStateOf(mutableMapOf<String, String?>()) }
  var isInitialized by remember { mutableStateOf(false) }
  LaunchedEffect(Unit) {
    isInitialized = true
  }
  if (!isInitialized) {
      Text("Loading...")
      return
  }
  val requiredFieldsValid = remember { mutableStateOf(mutableMapOf<String, Boolean>()) }
  val fields = introspectSerializableClass<KComposable>()

  LaunchedEffect(fields) {
      val validationState = fields.associate { field ->
          field.name to (field.hasDefault || defaults.value[field.name]?.isNotBlank() == true)
      }
      requiredFieldsValid.value = validationState.toMutableMap()
  }

  Column {
      Spacer(Modifier.height(16.dp))
      BasicText("KComposable")
      Spacer(Modifier.height(16.dp))
  fields.forEach { field ->
    when (field.type) {
      "kotlin.String" -> {
        Column {
            Text(
                text = field.name,
                style = TextStyle(color = Color.Gray),
                modifier = Modifier.padding(bottom = 4.dp)
            )
            BasicTextField(
                value = defaults.value[field.name] ?: "",
                onValueChange = { newValue ->
                    defaults.value = defaults.value.toMutableMap().apply {
                        this[field.name] = newValue
                    }
                    requiredFieldsValid.value = requiredFieldsValid.value.toMutableMap().apply {
                        this[field.name] = newValue.isNotBlank()
                    }
                },
                textStyle = TextStyle(
                    color = if (field.hasDefault || requiredFieldsValid.value[field.name] == true)
                        Color.Black
                    else
                        Color.Red
                ),
                modifier = Modifier
                    .border(1.dp, if (field.hasDefault || requiredFieldsValid.value[field.name] == true)
                        Color.Gray
                    else
                        Color.Red)
                    .padding(8.dp)
            )
        }}
    }
  }

  val isFormValid = requiredFieldsValid.value.all { it.value }

  Button(
      onClick = {
          CoroutineScope(Dispatchers.Default).launch {
              val postBody = KComposable(                )
                  try {
                      val response = ApiClient.postData("/login", postBody)
                      println("Response: ${response.bodyAsText()}")
                  } catch (e: Exception) {
                      println("Error: ${e.message}")
                  }
              }
          },
          enabled = isFormValid
      ) {
          Text("OK 10")
      }
  }
}
